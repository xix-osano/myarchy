# Automatically do an ls after each cd, z, or zoxide
cd ()
{
	if [ -n "$1" ]; then
		builtin cd "$@" && ls
	else
		builtin cd ~ && ls
	fi
}

# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Write iso file to sd card
iso2sd() {
  if [ $# -ne 2 ]; then
    echo "Usage: iso2sd <input_file> <output_device>"
    echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
    echo -e "\nAvailable SD cards:"
    lsblk -d -o NAME | grep -E '^sd[a-z]' | awk '{print "/dev/"$1}'
  else
    sudo dd bs=4M status=progress oflag=sync if="$1" of="$2"
    sudo eject $2
  fi
}

# Format an entire drive into a single partition (ext4 or FAT32)
format-drive() {
  if [ $# -lt 2 ] || [ $# -gt 3 ]; then
    echo "Usage: format-drive <device> <label> [ext4|fat32]"
    echo "Example: format-drive /dev/sdb MyDrive ext4"
    echo -e "\nAvailable drives:"
    lsblk -d -o NAME,SIZE,MODEL | awk '{print "/dev/"$1" - "$2" "$3}'
    return 1
  fi

  local device="$1"
  local label="$2"
  local fstype="${3:-ext4}"  # default to ext4 if not specified
  local part

  if [[ "$fstype" != "ext4" && "$fstype" != "fat32" ]]; then
    echo "Error: Filesystem type must be either 'ext4' or 'fat32'."
    return 1
  fi

  echo "WARNING: This will ERASE ALL DATA on $device and format it as $fstype labeled '$label'."
  read -rp "Are you sure you want to continue? (y/N): " confirm
  [[ "$confirm" =~ ^[Yy]$ ]] || return 0

  set -e
  trap 'echo "Error: Formatting failed. Drive may be partially modified."' ERR

  echo "→ Wiping existing signatures..."
  sudo wipefs -a "$device"
  sudo dd if=/dev/zero of="$device" bs=1M count=100 status=progress || true

  echo "→ Creating new GPT partition table..."
  sudo parted -s "$device" mklabel gpt
  sudo parted -s "$device" mkpart primary "$fstype" 1MiB 100%

  part="$([[ $device == *"nvme"* ]] && echo "${device}p1" || echo "${device}1")"

  echo "→ Formatting $part as $fstype..."
  case "$fstype" in
    ext4)
      sudo mkfs.ext4 -L "$label" "$part"
      ;;
    fat32)
      sudo mkfs.vfat -F32 -n "$label" "$part"
      ;;
  esac

  #echo "→ Mounting and setting permissions..."
  #local MOUNT_POINT="/mnt/$label"
  #sudo mkdir -p "$MOUNT_POINT"
  #sudo mount "$part" "$MOUNT_POINT"
  #sudo chown -R "$USER":"$USER" "$MOUNT_POINT"

  sync
  echo "✅ Drive formatted as $fstype, labeled '$label'."
  #echo "✅ Drive formatted as $fstype, labeled '$label', and mounted at $MOUNT_POINT."
}


# Transcode a video to a good-balance 1080p that's great for sharing online
transcode-video-1080p() {
  ffmpeg -i $1 -vf scale=1920:1080 -c:v libx264 -preset fast -crf 23 -c:a copy ${1%.*}-1080p.mp4
}

# Transcode a video to a good-balance 4K that's great for sharing online
transcode-video-4K() {
  ffmpeg -i $1 -c:v libx265 -preset slow -crf 24 -c:a aac -b:a 192k ${1%.*}-optimized.mp4
}

# Transcode any image to JPG image that's great for shrinking wallpapers
img2jpg() {
  magick $1 -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to JPG image that's great for sharing online without being too big
img2jpg-small() {
  magick $1 -resize 1080x\> -quality 95 -strip ${1%.*}.jpg
}

# Transcode any image to compressed-but-lossless PNG
img2png() {
  magick "$1" -strip -define png:compression-filter=5 \
    -define png:compression-level=9 \
    -define png:compression-strategy=1 \
    -define png:exclude-chunk=all \
    "${1%.*}.png"
}
